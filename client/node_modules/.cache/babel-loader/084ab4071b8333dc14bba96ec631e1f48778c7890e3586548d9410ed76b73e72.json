{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\shesecure\\\\client\\\\src\\\\components\\\\MapView.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, useMap } from 'react-leaflet';\nimport L from 'leaflet';\n\n// This component is a helper to automatically recenter the map view\n// when the user's position changes.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecenterAutomatically = ({\n  position\n}) => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    map.setView([position.lat, position.lng]);\n  }, [position, map]);\n  return null;\n};\n\n// Fix for a known issue with Leaflet and React where default marker icons don't appear\n_s(RecenterAutomatically, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = RecenterAutomatically;\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\nconst MapView = ({\n  isTripActive\n}) => {\n  _s2();\n  // Default to Gorakhpur before we get the user's location\n  const [currentPosition, setCurrentPosition] = useState({\n    lat: 26.7606,\n    lng: 83.3732\n  });\n  useEffect(() => {\n    if (navigator.geolocation) {\n      // In a real app, you would use watchPosition for live updates\n      navigator.geolocation.getCurrentPosition(position => {\n        setCurrentPosition({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, () => console.error(\"Error getting user location.\"));\n    }\n  }, [isTripActive]); // Re-fetch location when a trip starts\n\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [currentPosition.lat, currentPosition.lng],\n    zoom: 15,\n    style: {\n      height: '100%',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Marker, {\n      position: [currentPosition.lat, currentPosition.lng]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RecenterAutomatically, {\n      position: currentPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s2(MapView, \"ZLl7zOjwAHxnguGJ/rKpRmmEvJ4=\");\n_c2 = MapView;\nexport default MapView;\nvar _c, _c2;\n$RefreshReg$(_c, \"RecenterAutomatically\");\n$RefreshReg$(_c2, \"MapView\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","useMap","L","jsxDEV","_jsxDEV","RecenterAutomatically","position","_s","map","setView","lat","lng","_c","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","MapView","isTripActive","_s2","currentPosition","setCurrentPosition","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","console","error","center","zoom","style","height","width","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/LENOVO/Desktop/shesecure/client/src/components/MapView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Marker, useMap } from 'react-leaflet';\r\nimport L from 'leaflet';\r\n\r\n// This component is a helper to automatically recenter the map view\r\n// when the user's position changes.\r\nconst RecenterAutomatically = ({ position }) => {\r\n  const map = useMap();\r\n  useEffect(() => {\r\n    map.setView([position.lat, position.lng]);\r\n  }, [position, map]);\r\n  return null;\r\n};\r\n\r\n// Fix for a known issue with Leaflet and React where default marker icons don't appear\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n});\r\n\r\n\r\nconst MapView = ({ isTripActive }) => {\r\n  // Default to Gorakhpur before we get the user's location\r\n  const [currentPosition, setCurrentPosition] = useState({ lat: 26.7606, lng: 83.3732 });\r\n\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      // In a real app, you would use watchPosition for live updates\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          setCurrentPosition({\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n          });\r\n        },\r\n        () => console.error(\"Error getting user location.\")\r\n      );\r\n    }\r\n  }, [isTripActive]); // Re-fetch location when a trip starts\r\n\r\n  return (\r\n    <MapContainer center={[currentPosition.lat, currentPosition.lng]} zoom={15} style={{ height: '100%', width: '100%' }}>\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n      />\r\n      <Marker position={[currentPosition.lat, currentPosition.lng]} />\r\n      <RecenterAutomatically position={currentPosition} />\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default MapView;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}