{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\shesecure\\\\client\\\\src\\\\components\\\\MapView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '100%'\n};\n\n// A default center for the map before we get the user's location\nconst defaultCenter = {\n  lat: 26.7606,\n  // Example: Gorakhpur\n  lng: 83.3732\n};\n\n// This function dynamically loads the Google Maps script into the document\nconst loadGoogleMapsScript = (apiKey, callback) => {\n  // Check if the script is already loaded or being loaded\n  if (window.google && window.google.maps) {\n    callback();\n    return;\n  }\n  const existingScript = document.getElementById('googleMapsScript');\n  if (existingScript) {\n    existingScript.addEventListener('load', callback);\n    return;\n  }\n  const script = document.createElement('script');\n  script.id = 'googleMapsScript';\n  script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=maps`;\n  script.async = true;\n  script.defer = true;\n  script.addEventListener('load', callback);\n  document.head.appendChild(script);\n};\nconst MapView = ({\n  isTripActive\n}) => {\n  _s();\n  // useRef to hold the div element where the map will be rendered\n  const mapDivRef = useRef(null);\n  // useRef to hold the map instance to avoid re-renders\n  const mapInstanceRef = useRef(null);\n  const markerInstanceRef = useRef(null);\n  const [isMapReady, setMapReady] = useState(false);\n  const [currentPosition, setCurrentPosition] = useState(defaultCenter);\n\n  // Effect 1: Load the Google Maps script once\n  useEffect(() => {\n    const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n    if (!apiKey) {\n      console.error(\"Fatal Error: Google Maps API key is missing from .env file.\");\n      return;\n    }\n    loadGoogleMapsScript(apiKey, () => {\n      setMapReady(true);\n    });\n  }, []); // Empty dependency array ensures this runs only once\n\n  // Effect 2: Get and update the user's current location\n  useEffect(() => {\n    if (navigator.geolocation) {\n      // In a real app with live tracking, you would use navigator.geolocation.watchPosition\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCurrentPosition({\n          lat: latitude,\n          lng: longitude\n        });\n      }, () => {\n        console.error(\"Error getting user location. Defaulting to center.\");\n        setCurrentPosition(defaultCenter);\n      });\n    }\n  }, [isTripActive]); // This effect re-runs when the trip starts or ends\n\n  // Effect 3: Initialize the map and update the marker when position changes\n  useEffect(() => {\n    // Do nothing until the script is ready and the div is available\n    if (!isMapReady || !mapDivRef.current) {\n      return;\n    }\n\n    // If the map instance doesn't exist, create it\n    if (!mapInstanceRef.current) {\n      mapInstanceRef.current = new window.google.maps.Map(mapDivRef.current, {\n        center: currentPosition,\n        zoom: 15,\n        disableDefaultUI: true,\n        zoomControl: true\n      });\n    } else {\n      // If it exists, just pan to the new center\n      mapInstanceRef.current.panTo(currentPosition);\n    }\n\n    // If the marker doesn't exist, create it\n    if (!markerInstanceRef.current) {\n      markerInstanceRef.current = new window.google.maps.Marker({\n        position: currentPosition,\n        map: mapInstanceRef.current\n      });\n    } else {\n      // If it exists, just update its position\n      markerInstanceRef.current.setPosition(currentPosition);\n    }\n  }, [isMapReady, currentPosition]); // This effect re-runs when the map is ready or the position changes\n\n  return isMapReady ?\n  /*#__PURE__*/\n  // This div is where the Google Map will be rendered\n  _jsxDEV(\"div\", {\n    ref: mapDivRef,\n    style: containerStyle\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '1rem',\n      textAlign: 'center'\n    },\n    children: \"Loading Map...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(MapView, \"5XIKNQsICM4cKJaahLmr8KyKmhI=\");\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","containerStyle","width","height","defaultCenter","lat","lng","loadGoogleMapsScript","apiKey","callback","window","google","maps","existingScript","document","getElementById","addEventListener","script","createElement","id","src","async","defer","head","appendChild","MapView","isTripActive","_s","mapDivRef","mapInstanceRef","markerInstanceRef","isMapReady","setMapReady","currentPosition","setCurrentPosition","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","console","error","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","current","Map","center","zoom","disableDefaultUI","zoomControl","panTo","Marker","map","setPosition","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","padding","textAlign","children","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Desktop/shesecure/client/src/components/MapView.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst containerStyle = {\r\n  width: '100%',\r\n  height: '100%'\r\n};\r\n\r\n// A default center for the map before we get the user's location\r\nconst defaultCenter = {\r\n  lat: 26.7606, // Example: Gorakhpur\r\n  lng: 83.3732\r\n};\r\n\r\n// This function dynamically loads the Google Maps script into the document\r\nconst loadGoogleMapsScript = (apiKey, callback) => {\r\n  // Check if the script is already loaded or being loaded\r\n  if (window.google && window.google.maps) {\r\n    callback();\r\n    return;\r\n  }\r\n  const existingScript = document.getElementById('googleMapsScript');\r\n  if (existingScript) {\r\n    existingScript.addEventListener('load', callback);\r\n    return;\r\n  }\r\n  \r\n  const script = document.createElement('script');\r\n  script.id = 'googleMapsScript';\r\n  script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=maps`;\r\n  script.async = true;\r\n  script.defer = true;\r\n  script.addEventListener('load', callback);\r\n  document.head.appendChild(script);\r\n};\r\n\r\nconst MapView = ({ isTripActive }) => {\r\n  // useRef to hold the div element where the map will be rendered\r\n  const mapDivRef = useRef(null);\r\n  // useRef to hold the map instance to avoid re-renders\r\n  const mapInstanceRef = useRef(null);\r\n  const markerInstanceRef = useRef(null);\r\n\r\n  const [isMapReady, setMapReady] = useState(false);\r\n  const [currentPosition, setCurrentPosition] = useState(defaultCenter);\r\n\r\n  // Effect 1: Load the Google Maps script once\r\n  useEffect(() => {\r\n    const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\r\n    if (!apiKey) {\r\n      console.error(\"Fatal Error: Google Maps API key is missing from .env file.\");\r\n      return;\r\n    }\r\n    loadGoogleMapsScript(apiKey, () => {\r\n      setMapReady(true);\r\n    });\r\n  }, []); // Empty dependency array ensures this runs only once\r\n\r\n  // Effect 2: Get and update the user's current location\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      // In a real app with live tracking, you would use navigator.geolocation.watchPosition\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          setCurrentPosition({ lat: latitude, lng: longitude });\r\n        },\r\n        () => {\r\n          console.error(\"Error getting user location. Defaulting to center.\");\r\n          setCurrentPosition(defaultCenter);\r\n        }\r\n      );\r\n    }\r\n  }, [isTripActive]); // This effect re-runs when the trip starts or ends\r\n\r\n  // Effect 3: Initialize the map and update the marker when position changes\r\n  useEffect(() => {\r\n    // Do nothing until the script is ready and the div is available\r\n    if (!isMapReady || !mapDivRef.current) {\r\n      return;\r\n    }\r\n    \r\n    // If the map instance doesn't exist, create it\r\n    if (!mapInstanceRef.current) {\r\n      mapInstanceRef.current = new window.google.maps.Map(mapDivRef.current, {\r\n        center: currentPosition,\r\n        zoom: 15,\r\n        disableDefaultUI: true,\r\n        zoomControl: true,\r\n      });\r\n    } else {\r\n      // If it exists, just pan to the new center\r\n      mapInstanceRef.current.panTo(currentPosition);\r\n    }\r\n    \r\n    // If the marker doesn't exist, create it\r\n    if (!markerInstanceRef.current) {\r\n      markerInstanceRef.current = new window.google.maps.Marker({\r\n        position: currentPosition,\r\n        map: mapInstanceRef.current,\r\n      });\r\n    } else {\r\n      // If it exists, just update its position\r\n      markerInstanceRef.current.setPosition(currentPosition);\r\n    }\r\n  }, [isMapReady, currentPosition]); // This effect re-runs when the map is ready or the position changes\r\n\r\n  return isMapReady ? (\r\n    // This div is where the Google Map will be rendered\r\n    <div ref={mapDivRef} style={containerStyle} />\r\n  ) : (\r\n    <div style={{ padding: '1rem', textAlign: 'center' }}>Loading Map...</div>\r\n  );\r\n};\r\n\r\nexport default MapView;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}